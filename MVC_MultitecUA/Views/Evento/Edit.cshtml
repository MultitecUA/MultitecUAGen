@model MultitecUAGenNHibernate.EN.MultitecUA.EventoEN

@{
    ViewBag.Title = "Editar";
}

<h2>Editar Evento: @ViewData["evento"]</h2>

<p class="text-center">
    <label>@Html.ActionLink("Inicio", "Index", "Home")</label><span> >> </span><label>@Html.ActionLink("Eventos", "Index")</label><span> >> </span><label>@ViewBag.Title</label>
</p>

@using (Html.BeginForm("Edit","Evento", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    @{ if (ViewData.ContainsKey("eventovacio"))
        {
            <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> No pueden haber campos vacios</p>
            <br />
        }
        else
        {
            <br /><br />
        }
    }
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        <label class="control-label col-md-2" for="Nombre">Nombre</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
            @{ if (ViewData.ContainsKey("nombreevento"))
                {
                    <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> El nombre de este evento ya existe</p>
                }
                else if (ViewData.ContainsKey("formatonombreevento"))
                {
                    <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> De 4 a 30 caracteres. Letras, números y espacios.</p>
                }
            }
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="Descripcion">Descripción</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
            @{ if (ViewData.ContainsKey("formatodescripvento"))
                {
                    <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> De 5 a 200 caracteres.</p>

                }
            }
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="FechaInicio">Fecha de Inicio</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.FechaInicio, new { htmlAttributes = new { @class = "form-control" }, @placeholder = "mm/dd/yyyy hh:mm" })
            @{ if (ViewData.ContainsKey("FIMayorFF"))
                {
                    <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> La fecha de inicio no puede ser mayor a la fecha de fin.</p>

                }
            }
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="FechaFin">Fecha de Fin</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.FechaFin, new { htmlAttributes = new { @class = "form-control" }, @placeholder = "mm/dd/yyyy hh:mm" })
            @Html.ValidationMessageFor(model => model.FechaFin, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="FechaInicioInscripcion">Fecha de Inicio de Inscripción</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.FechaInicioInscripcion, new { htmlAttributes = new { @class = "form-control" }, @placeholder = "mm/dd/yyyy hh:mm" })
            @{ if (ViewData.ContainsKey("FIIMayorFTI"))
                {
                    <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> La fecha de inicio de inscripción no puede ser mayor a la fecha de tope de inscripción.</p>
                }
                else if (ViewData.ContainsKey("FIIMayorFF"))
                {
                    <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> La fecha de inicio de inscripción no puede ser mayor a la fecha de tope de inscripción.</p>
                }
            }
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="FechaTopeInscripcion">Fecha Tope de Inscripción</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.FechaTopeInscripcion, new { htmlAttributes = new { @class = "form-control" }, @placeholder = "mm/dd/yyyy hh:mm" })
            @{ if (ViewData.ContainsKey("FTIMayorFF"))
                {
                    <p class="text-danger" style="margin-left: 1em;"><span class="glyphicon glyphicon-remove"></span> La fecha de tope de inscripción no puede ser mayor a la fecha de fin.</p>
                }
            }
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2" for="file">Foto (si no se indica, se borrará la foto que hubiese anteriormente): </label>
        <div class="col-md-10">
            <input class=" text-box single-line" id="file" name="file" type="file" value="" />
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Volver a la lista", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
